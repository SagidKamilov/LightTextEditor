import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.io.*;
import java.nio.file.Files;
import javax.swing.JButton;
import javax.swing.JFileChooser;

public class TextEditor {
    private JPanel MainPanel;
    private JPanel TextEditPanel;
    private JEditorPane editorPane;
    private JButton saveFileAs;
    private JButton saveFile;
    private JButton openFileButton;
    private JPanel ButtonsPanel;
    private JLabel fileOpen;
    private JLabel nameOpenedFile;
    private File currentFile;

    private void createUIComponents() {
        // TODO: place custom component creation code here
        nameOpenedFile = new JLabel();
        openFileButton = new JButton("Открыть файл");
        openFileButton.addActionListener(e -> openToFile());
        saveFile = new JButton("Сохранить");
        saveFile.addActionListener(e -> saveToFile());
        saveFileAs = new JButton("Сохранить как");
        saveFileAs.addActionListener(e -> saveToFileAs());
    }

    protected void openToFile() {
        // Создаем объект для доступа к файлам
        JFileChooser fileChooser = new JFileChooser();
        // Открываем диалоговое окно для выбора файла
        int retval = fileChooser.showOpenDialog(openFileButton);
        // Проверка на успешное подтверждение выбора файла
        if (retval == JFileChooser.APPROVE_OPTION) {
            // Получаем текущий файл
            File file = fileChooser.getSelectedFile();
            // Копируем для дальнейшего использования в функции сохранения
            currentFile = file;
            // Устанавливаем название выбранного файла
            nameOpenedFile.setText(file.getName());
            // Ничего не делаем, если объект отсутствует
            if (file == null) {
                return;
            }
            // Читаем все, что в файле и передаем в пространство редактирования текста
            try (BufferedReader reader = Files.newBufferedReader(file.toPath())) {
                editorPane.read(reader, null);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    protected void saveToFile() {
        // Проверяем существование файла, если есть, тогда сохраняем все изменения в том же файле
        if (currentFile != null) {
            try {
                editorPane.write(new OutputStreamWriter(new FileOutputStream(currentFile), "utf-8"));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    protected void saveToFileAs() {
        // Все то же самое
        JFileChooser fileChooser = new JFileChooser();
        int retval = fileChooser.showSaveDialog(saveFileAs);
        if (retval == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (file == null) {
                return;
            }
            // Проверяем, заканчивается ли имя файла (включая его расширение) на .txt.
            // Если нет, то код изменяем имя файла, добавляя .txt в конец.
            if (!file.getName().toLowerCase().endsWith(".txt")) {
                file = new File(file.getParentFile(), file.getName() + ".txt");
            }
            try {
                // Передаем изменения из текстового пространства в файл и сохраняем их в нем
                editorPane.write(new OutputStreamWriter(new FileOutputStream(file),
                        "utf-8"));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        MainPanel = new JPanel();
        MainPanel.setLayout(new BorderLayout(0, 0));
        MainPanel.setPreferredSize(new Dimension(650, 400));
        MainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null, TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, null, null));
        TextEditPanel = new JPanel();
        TextEditPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        MainPanel.add(TextEditPanel, BorderLayout.CENTER);
        editorPane = new JEditorPane();
        TextEditPanel.add(editorPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 50), null, 0, false));
        ButtonsPanel = new JPanel();
        ButtonsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 6, new Insets(30, 10, 10, 10), -1, -1));
        MainPanel.add(ButtonsPanel, BorderLayout.NORTH);
        saveFileAs.setLabel("Сохранить как");
        saveFileAs.setText("Сохранить как");
        ButtonsPanel.add(saveFileAs, new com.intellij.uiDesigner.core.GridConstraints(0, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        ButtonsPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        saveFile.setLabel("Сохранить");
        saveFile.setText("Сохранить");
        ButtonsPanel.add(saveFile, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openFileButton.setText("Открыть файл");
        ButtonsPanel.add(openFileButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileOpen = new JLabel();
        fileOpen.setDoubleBuffered(true);
        fileOpen.setText("Открыт файл:");
        ButtonsPanel.add(fileOpen, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameOpenedFile.setText("");
        ButtonsPanel.add(nameOpenedFile, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    public static void main(String[] args) {
        // Этот метод будет вызван при запуске программы
        SwingUtilities.invokeLater(() -> {
            createAndShowGUI();
        });
    }

    private static void createAndShowGUI() {
        // Создает приложение и настраивает
        JFrame frame = new JFrame("Форма регистрации");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


        TextEditor text_editor = new TextEditor();
        frame.setContentPane(text_editor.MainPanel);


        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

}
